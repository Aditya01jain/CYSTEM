{"version":3,"file":"file.cjs","sources":["../../src/utilities/file.ts"],"sourcesContent":["import { isNull, slice as sliceData, detectOS } from \"./shared\";\n\nexport const SIZE_MAP = {\n  byte: 1024, // 1 KB = 1024 bytes\n  kb: 1024 * 1024, // 1 MB = 1024 * 1024 bytes\n  mb: 1024 * 1024 * 1024, // 1 GB = 1024 * 1024 * 1024 bytes\n  gb: 1024 * 1024 * 1024 * 1024 // 1 TB = 1024 * 1024 * 1024 * 1024 bytes\n};\n\nfunction formatFileSize(fileSize: number): string {\n  if (!fileSize) return \"\";\n  if (fileSize < SIZE_MAP.byte) return fileSize + \" B\";\n  else if (fileSize < SIZE_MAP.kb)\n    return (fileSize / SIZE_MAP.byte).toFixed(0) + \" KB\";\n  else if (fileSize < SIZE_MAP.mb)\n    return (fileSize / SIZE_MAP.kb).toFixed(1) + \" MB\";\n  else return (fileSize / SIZE_MAP.gb).toFixed(1) + \" GB\";\n}\n\nfunction fileName(value: File, slice: number = 60): string {\n  if (isNull(value)) return \"\";\n  const { name: fileName = \"\", type = \"\" } = value || {};\n  const ext = (type || \"\").split(\"/\")[1];\n  return `${sliceData(\n    fileName.substring(0, fileName.lastIndexOf(\".\")),\n    0,\n    (slice || 60) - 4\n  )}${fileName.length > slice ? ext : \"\"}`;\n}\n\nfunction fileExtension(value: File): string {\n  const { name: fileName = \"\" } = value || {};\n  return fileName.split(\".\").pop() || \"\";\n}\n\nconst fileType = ({ type, name }: { type: string; name: string }): boolean => {\n  return (\n    type.startsWith(\"application\") ||\n    name.endsWith(\".bat\") ||\n    type.startsWith(\"image\")\n  );\n};\n\nconst checkFileSize = (size: number, maxSize: number) => {\n  return size <= maxSize;\n};\n\nconst getBytes = (bytes: number): string | number => {\n  let bytesByOS: number | string = bytes;\n  const conversionFactor = 1.048576;\n  if (detectOS() === \"unix\")\n    bytesByOS = (bytesByOS * conversionFactor).toFixed(0);\n  return bytesByOS;\n};\n\nexport {\n  fileType,\n  formatFileSize,\n  fileName,\n  fileExtension,\n  checkFileSize,\n  getBytes\n};\n"],"names":["SIZE_MAP","formatFileSize","fileSize","fileName","value","slice","isNull","type","ext","sliceData","fileExtension","fileType","name","checkFileSize","size","maxSize","getBytes","bytes","bytesByOS","conversionFactor","detectOS"],"mappings":"gHAEaA,EAAW,CACtB,KAAM,KACN,GAAI,KAAO,KACX,GAAI,KAAO,KAAO,KAClB,GAAI,KAAO,KAAO,KAAO,IAC3B,EAEA,SAASC,EAAeC,EAA0B,CAChD,OAAKA,EACDA,EAAWF,EAAS,KAAaE,EAAW,KACvCA,EAAWF,EAAS,IACnBE,EAAWF,EAAS,MAAM,QAAQ,CAAC,EAAI,MACxCE,EAAWF,EAAS,IACnBE,EAAWF,EAAS,IAAI,QAAQ,CAAC,EAAI,OAClCE,EAAWF,EAAS,IAAI,QAAQ,CAAC,EAAI,MAN5B,EAOxB,CAEA,SAASG,EAASC,EAAaC,EAAgB,GAAY,CACzD,GAAIC,EAAAA,OAAOF,CAAK,EAAU,MAAA,GACpB,KAAA,CAAE,KAAMD,EAAW,GAAI,KAAAI,EAAO,EAAG,EAAIH,GAAS,GAC9CI,GAAOD,GAAQ,IAAI,MAAM,GAAG,EAAE,CAAC,EACrC,MAAO,GAAGE,EAAA,MACRN,EAAS,UAAU,EAAGA,EAAS,YAAY,GAAG,CAAC,EAC/C,GACCE,GAAS,IAAM,CAAA,CACjB,GAAGF,EAAS,OAASE,EAAQG,EAAM,EAAE,EACxC,CAEA,SAASE,EAAcN,EAAqB,CAC1C,KAAM,CAAE,KAAMD,EAAW,EAAG,EAAIC,GAAS,CAAA,EACzC,OAAOD,EAAS,MAAM,GAAG,EAAE,OAAS,EACtC,CAEA,MAAMQ,EAAW,CAAC,CAAE,KAAAJ,EAAM,KAAAK,KAEtBL,EAAK,WAAW,aAAa,GAC7BK,EAAK,SAAS,MAAM,GACpBL,EAAK,WAAW,OAAO,EAIrBM,EAAgB,CAACC,EAAcC,IAC5BD,GAAQC,EAGXC,EAAYC,GAAmC,CACnD,IAAIC,EAA6BD,EACjC,MAAME,EAAmB,SACzB,OAAIC,EAAAA,SAAe,IAAA,SACJF,GAAAA,EAAYC,GAAkB,QAAQ,CAAC,GAC/CD,CACT"}