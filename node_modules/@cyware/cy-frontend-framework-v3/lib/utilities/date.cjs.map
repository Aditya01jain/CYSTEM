{"version":3,"file":"date.cjs","sources":["../../src/utilities/date.js"],"sourcesContent":["import { DateTime } from \"luxon\";\n\nconst DEFAULT_FORMATS = {\n  date: 'yyyy-MM-dd',\n  month: 'yyyy-MM',\n  months: 'yyyy-MM',\n  datetime: 'yyyy-MM-dd HH:mm:ss',\n  time: 'HH:mm:ss',\n  week: 'yyyywWW',\n  timerange: 'HH:mm:ss',\n  daterange: 'yyyy-MM-dd',\n  monthrange: 'yyyy-MM',\n  datetimerange: 'yyyy-MM-dd HH:mm:ss',\n  year: 'yyyy',\n  years: 'yyyy'\n};\nconst DATE_FORMATTER = function(value, format) {\n  if (format === 'timestamp') return value.getTime();\n  return formatDate(value, format);\n};\nconst DATE_PARSER = function(text, format) {\n  if (format === 'timestamp') return new Date(Number(text));\n  return parseDate(text, format);\n};\nconst RANGE_FORMATTER = function(value, format) {\n  if (Array.isArray(value) && value.length === 2) {\n    const start = value[0];\n    const end = value[1];\n\n    if (start && end) {\n      return [DATE_FORMATTER(start, format), DATE_FORMATTER(end, format)];\n    }\n  }\n  return '';\n};\nconst RANGE_PARSER = function(array, format, separator) {\n  if (!Array.isArray(array)) {\n    array = array.split(separator);\n  }\n  if (array.length === 2) {\n    const range1 = array[0];\n    const range2 = array[1];\n\n    return [DATE_PARSER(range1, format), DATE_PARSER(range2, format)];\n  }\n  return [];\n};\nconst TYPE_VALUE_RESOLVER_MAP = {\n  default: {\n    formatter(value) {\n      if (!value) return '';\n      return '' + value;\n    },\n    parser(text) {\n      if (text === undefined || text === '') return null;\n      return text;\n    }\n  },\n  date: {\n    formatter: DATE_FORMATTER,\n    parser: DATE_PARSER\n  },\n  datetime: {\n    formatter: DATE_FORMATTER,\n    parser: DATE_PARSER\n  },\n  daterange: {\n    formatter: RANGE_FORMATTER,\n    parser: RANGE_PARSER\n  },\n  datetimerange: {\n    formatter: RANGE_FORMATTER,\n    parser: RANGE_PARSER\n  },\n};\n\nfunction isDateObject (val) {\n  return val instanceof Date;\n}\n\nfunction isDate(date) {\n  if (date === null || date === undefined) return false;\n  if (isNaN(new Date(date).getTime())) return false;\n  return !Array.isArray(date);\n\n}\n\nfunction toDate(date) {\n  return isDate(date) ? new Date(date) : null;\n}\n\nfunction formatDate(date, format) {\n  date = toDate(date);\n  if (!date) return '';\n  return DateTime.fromJSDate(date).toFormat(format || 'yyyy-MM-dd');\n}\n\nfunction parseDate(string, format) {\n  return fecha.fromFormat(string, format || 'yyyy-MM-dd');\n}\n\nfunction formatAsFormatAndType(value, customFormat, type) {\n  if (!value) return null;\n  const formatter = (\n    TYPE_VALUE_RESOLVER_MAP[type] ||\n    TYPE_VALUE_RESOLVER_MAP['default']\n  ).formatter;\n  const format = customFormat || DEFAULT_FORMATS[type];\n  return formatter(value, format);\n}\n\nexport function toISODate(date, format = \"LLL dd, yyyy, hh:mm a\", timezone = null)  {\n  if (typeof date === \"boolean\") return date;\n  if (!date) return \"NA\";\n  let newDate =\n    typeof date === \"number\"\n      ? DateTime.fromSeconds(date).setZone(timezone)\n      : DateTime.fromISO(date).setZone(timezone);\n  if (newDate.invalid || newDate.year <= 1970) return date;\n  return newDate.toFormat(format);\n}\n"],"names":["toISODate","date","format","timezone","newDate","DateTime"],"mappings":"yGA+GO,SAASA,EAAUC,EAAMC,EAAS,wBAAyBC,EAAW,KAAO,CAClF,GAAI,OAAOF,GAAS,UAAW,OAAOA,EACtC,GAAI,CAACA,EAAM,MAAO,KAClB,IAAIG,EACF,OAAOH,GAAS,SACZI,EAAAA,SAAS,YAAYJ,CAAI,EAAE,QAAQE,CAAQ,EAC3CE,EAAAA,SAAS,QAAQJ,CAAI,EAAE,QAAQE,CAAQ,EAC7C,OAAIC,EAAQ,SAAWA,EAAQ,MAAQ,KAAaH,EAC7CG,EAAQ,SAASF,CAAM,CAChC"}