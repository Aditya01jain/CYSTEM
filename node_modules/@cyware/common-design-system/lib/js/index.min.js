// h = hue in % based on primary, s = saturation in %, l = lightness in %, c = category A/B to calculate s and l or P which is pivot/primary

const PRIMARY_CONFIG = {
  light: {
    primary: {
      c: 'P',
    },
    P900: {
      s: 48.7,
      l: 39.2,
      c: 'A',
    },
    P800: {
      s: 79.2,
      l: 58.8,
      c: 'A',
    },
    P700: {
      s: 98.7,
      l: 78.4,
      c: 'A',
    },
    P600: {
      c: 'P',
    },
    P500: {
      s: 100,
      l: 121.5,
      c: 'A',
    },
    P400: {
      s: 100,
      l: 145,
      c: 'A',
    },
    P300: {
      s: 40,
      l: 75,
      c: 'B',
    },
    P200: {
      s: 70,
      l: 92,
      c: 'B',
    },
    P100: {
      s: 65,
      l: 96,
      c: 'B',
    },
    P50: {
      s: 65,
      l: 98,
      c: 'B',
    },
    P10: {
      s: 100,
      l: 100,
      c: 'B',
    },
  },
  dark: {
    primary: {
      s: 100,
      l: 74,
    },
    P900: {
      s: 2,
      l: 90,
      c: 'B'
    },
    P800: {
      s: 6,
      l: 75,
      c: 'B'
    },
    P700: {
      h: 97.3,
      s: 121,
      l: 156,
      c: 'A'
    },
    P600: {
      h: 97.3,
      s: 121,
      l: 145,
      c: 'A'
    },
    P500: {
      h: 97.3,
      s: 121,
      l: 133,
      c: 'A'
    },
    P400: {
      h: 95.6,
      s: 7,
      l: 60,
      c: 'B'
    },
    P300: {
      h: 95.6,
      s: 7,
      l: 45,
      c: 'B'
    },
    P200: {
      h: 94.3,
      s: 10,
      l: 25,
      c: 'B'
    },
    P100: {
      h: 95.6,
      s: 10,
      l: 19,
      c: 'B'
    },
    P50: {
      h: 97.8,
      s: 6,
      l: 16,
      c: 'B'
    },
    P10: {
      h: 97.8,
      s: 6,
      l: 13,
      c: 'B'
    },
  },
};

const hexToHSL = (H, value = false) => {
  // Convert hex to RGB first
  let r = 0,
    g = 0,
    b = 0;
  if (H.length == 4) {
    r = "0x" + H[1] + H[1];
    g = "0x" + H[2] + H[2];
    b = "0x" + H[3] + H[3];
  } else if (H.length == 7) {
    r = "0x" + H[1] + H[2];
    g = "0x" + H[3] + H[4];
    b = "0x" + H[5] + H[6];
  }
  // Then to HSL
  r /= 255;
  g /= 255;
  b /= 255;
  let cmin = Math.min(r, g, b),
    cmax = Math.max(r, g, b),
    delta = cmax - cmin,
    h = 0,
    s = 0,
    l = 0;

  if (delta == 0) h = 0;
  else if (cmax == r) h = ((g - b) / delta) % 6;
  else if (cmax == g) h = (b - r) / delta + 2;
  else h = (r - g) / delta + 4;

  h = Math.round(h * 60);

  if (h < 0) h += 360;

  l = (cmax + cmin) / 2;
  s = delta == 0 ? 0 : delta / (1 - Math.abs(2 * l - 1));
  s = +(s * 100).toFixed(1);
  l = +(l * 100).toFixed(1);
  s = Math.round(s);
  l = Math.round(l);
  return value ? "hsl(" + h + "," + s + "%," + l + "%)" : { h, s, l };
};

const getH = (current, primary) => {
  if (current.h) {
    return Math.round((primary.h * current.h) / 100)
  }
  return primary.h
};

const getS = (current, primary) => {
  if (current.c == 'A') {
    return Math.round((primary.s * current.s) / 100)
  }
  return current.s
};

const getL = (current, primary) => {
  if (current.c == 'A') {
    return Math.round((primary.l * current.l) / 100)
  }
  return current.l
};

const DEFAULT_THEME = { skin: "light", color: "#1A3EE8" };
const SKIN_TYPES = {
  LIGHT: "light",
  DARK: "dark"
};
class Theme {
  #theme;
  constructor(skin, primary) {
    const primaryColor =
      primary && this.#validatePrimaryInput(primary)
        ? primary
        : DEFAULT_THEME.color;
    skin = skin === SKIN_TYPES.DARK ? SKIN_TYPES.DARK : SKIN_TYPES.LIGHT;
    this.#theme = {
      skin,
      primary: primaryColor
    };

    this.#setColorPalette();
    this.#setSkinColor(skin);
  }

  get getTheme() {
    return this.#theme;
  }
  set setTheme(value) {
    this.#theme = value;
  }

  #setColorPalette() {
    const primary = hexToHSL(this.#theme.primary);
    const style = this.#genarateColorVars(primary);
    let styleSheet = document.createElement("style");
    styleSheet.innerText = style;
    document.head.appendChild(styleSheet);
  }

  #genarateColorVars(primary) {

    let lightSkinStyleStr = "";
    let darkSkinStyleStr = "";

    Object.values(SKIN_TYPES).forEach(skin => {
      Object.entries(PRIMARY_CONFIG[skin]).forEach(([key, hslConfig]) => {
        if (skin === SKIN_TYPES.DARK) {
          darkSkinStyleStr += `--${key}: hsl(${getH(hslConfig, primary)}, ${getS(hslConfig, primary)}%, ${getL(hslConfig, primary)}%); `;
        } else {
          lightSkinStyleStr += hslConfig.c === 'P' ? `--${key}: hsl(${primary.h}, ${primary.s}%, ${primary.l}%); ` : `--${key}: hsl(${getH(hslConfig, primary)}, ${getS(hslConfig, primary)}%, ${getL(hslConfig, primary)}%); `;
        }
      });
    });

    return `:root{
      ${lightSkinStyleStr}
    } html[data-cy-color-mode=dark]{
      ${darkSkinStyleStr}
    }`;
  }

  #setSkinColor(data) {
    document.documentElement.dataset.cyColorMode = data;
  }

  #getSkinColor() {
    return document.documentElement.dataset.cyColorMode;
  }

  #validatePrimaryInput(input) {
    if (!/^#[0-9A-F]{6}$/i.test(input)) {
      console.error(
        "Invalid color code. Please enter a hexadecimal color code"
      );
      return false;
    }
    return true;
  }

  onPrimaryChange(input) {
    if (!this.#validatePrimaryInput(input)) {
      return;
    }

    const theme = this.getTheme;
    this.setTheme = { ...theme, primary: input };
    this.#setColorPalette();
  }

  toggleMode(skinVal) {
    const theme = this.getTheme;
    let skin;

    if (skinVal) skin = skinVal;
    else {
      skin = this.#getSkinColor() || SKIN_TYPES.LIGHT;
      skin = skin === SKIN_TYPES.LIGHT ? SKIN_TYPES.DARK : SKIN_TYPES.LIGHT;
    }

    this.setTheme = { ...theme, skin };
    this.#setSkinColor(skin);
  }
}

export { Theme as default };
