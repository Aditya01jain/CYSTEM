// Colors
// -----------------------------------------------------------------------------------------------------------
@mixin generate-color-sets($color-map) {
  @each $color-key, $color-map in $color-map {
    @each $color-subkey, $color-values in $color-map {
      #{convert-to-css-variable($color-key, $color-subkey)}: hsl(
        get-hue($color-values),
        map-get($color-values, s) * 1%,
        map-get($color-values, l) * 1%
      );
    }
  }
}

@mixin generate-additional-color-sets(
  $mode: light,
  $map: $additional-color-map
) {
  $index: 0;
  @if $mode == dark {
    $index: 600;
  }
  @each $map-key, $map-value in $map {
    @each $l1-map-key, $l1-map-value in $map-value {
      @each $l2-map-key, $l2-map-value in $l1-map-value {
        $l2-key: abs(calc($l2-map-key - $index));
        #{convert-to-css-variable($l1-map-key, #{$l2-key} )}: hsl(
          map-get($l2-map-value, h),
          map-get($l2-map-value, s) * 1%,
          map-get($l2-map-value, l) * 1%
        );
      }
    }
  }
}

@mixin defineColorHSL($color, $hue, $saturation, $lightness) {
  #{$color}: unquote("hsl(#{$hue}, #{$saturation}, #{$lightness})");
  #{$color}-h: #{$hue};
  #{$color}-s: #{$saturation};
  #{$color}-l: #{$lightness};
}

@mixin generate-color-utility-classes($colors: $color-class-map) {
  @each $key, $value in $colors {
    @each $value in map-get($value, "bg") {
      $name: #{$key}#{$value};
      .#{$prefix}-bg-#{$name} {
        background-color: cy-color(#{$name}) !important;
      }
    }
    @each $value in map-get($value, "color") {
      $name: #{$key}#{$value};
      .#{$prefix}-color-#{$name} {
        color: cy-color(#{$name});
      }
    }
  }
}

// Typography
// -----------------------------------------------------------------------------------------------------------
@mixin generate-typography(
  $font-set,
  $weight-map: $text-weight,
  $is-header: false
) {
  @if $is-header {
    @each $type, $map in $font-set {
      .#{$prefix}-#{$type} {
        @include generate-font(
          $size: map-get($map, "size"),
          $wt: map-get($map, "font-weight"),
          $lh: map-get($map, "line-height")
        );
      }
    }
  } @else {
    @each $type, $map in $font-set {
      .#{$prefix}-text-f#{$type} {
        @include generate-font(
          $size: map-get($map, "size"),
          $lh: map-get($map, "line-height")
        );
      }
    }
  }
}

@mixin generate-font($size: false, $wt: false, $lh: false) {
  @if $size {
    font-size: $size;
  }

  @if $wt {
    font-weight: $wt;
  }

  @if $lh {
    line-height: $lh;
  }
}

// Shadows
// -----------------------------------------------------------------------------------------------------------
@mixin generate-shadows($shadows, $mode: "light") {
  @if $mode == "light" {
    :root {
      @include generate-shadows-from-map(map-get($shadows, $mode));
    }
  } @else {
    html[data-cy-color-mode="dark"] {
      @include generate-shadows-from-map(map-get($shadows, $mode));
    }
  }
}

@mixin generate-shadows-from-map($map) {
  @each $key, $value in $map {
    $left: map-get($value, "left");
    $right: map-get($value, "right");
    $color: cy-color("shadow");
    @if $right {
      .#{$prefix}-shadow-#{$key} {
        box-shadow: #{map-get($left, "value")}
            alpha("shadow", map-get($left, "opacity")),
          #{map-get($right, "value")}
            alpha("shadow", map-get($right, "opacity"));
      }
    } @else {
      .#{$prefix}-shadow-#{$key} {
        box-shadow: #{map-get($left, "value")}
          alpha("shadow", map-get($left, "opacity"));
      }
    }
  }
}

// Overlay
// -----------------------------------------------------------------------------------------------------------

@mixin generate-overlay($mode: "light") {
  @if $mode == "light" {
    :root {
      .#{$prefix}-overlay {
        opacity: 0.2;
        background: var(--N900);
      }
    }
  } @else {
    html[data-cy-color-mode="dark"] {
      .#{$prefix}-overlay {
        opacity: 0.8;
        background: var(--N100);
      }
    }
  }
}

// Spacing
// -----------------------------------------------------------------------------------------------------------

@mixin generate-spacing($breakpoints) {
  @each $breakpoint in map-keys($grid-breakpoints) {
    @include media-breakpoint-up($breakpoint) {
      $infix: breakpoint-infix($breakpoint, $grid-breakpoints);

      @each $prop, $abbrev in (margin: m, padding: p) {
        @each $size, $length in $spacing {
          .#{$prefix}-#{$abbrev}#{$infix}-#{$size} {
            #{$prop}: $length !important;
          }
          .#{$prefix}-#{$abbrev}t#{$infix}-#{$size},
          .#{$prefix}-#{$abbrev}y#{$infix}-#{$size} {
            #{$prop}-top: $length !important;
          }
          .#{$prefix}-#{$abbrev}r#{$infix}-#{$size},
          .#{$prefix}-#{$abbrev}x#{$infix}-#{$size} {
            #{$prop}-right: $length !important;
          }
          .#{$prefix}-#{$abbrev}b#{$infix}-#{$size},
          .#{$prefix}-#{$abbrev}y#{$infix}-#{$size} {
            #{$prop}-bottom: $length !important;
          }
          .#{$prefix}-#{$abbrev}l#{$infix}-#{$size},
          .#{$prefix}-#{$abbrev}x#{$infix}-#{$size} {
            #{$prop}-left: $length !important;
          }
        }
      }

      // Negative margins (e.g., where `.mb-n1` is negative version of `.#{$prefix}-mb-1`)
      @each $size, $length in $spacing {
        @if $size != 0 {
          .#{$prefix}-m#{$infix}-n#{$size} {
            margin: -$length !important;
          }
          .#{$prefix}-mt#{$infix}-n#{$size},
          .#{$prefix}-my#{$infix}-n#{$size} {
            margin-top: -$length !important;
          }
          .#{$prefix}-mr#{$infix}-n#{$size},
          .#{$prefix}-mx#{$infix}-n#{$size} {
            margin-right: -$length !important;
          }
          .#{$prefix}-mb#{$infix}-n#{$size},
          .#{$prefix}-my#{$infix}-n#{$size} {
            margin-bottom: -$length !important;
          }
          .#{$prefix}-ml#{$infix}-n#{$size},
          .#{$prefix}-mx#{$infix}-n#{$size} {
            margin-left: -$length !important;
          }
        }
      }

      // Some special margin utils
      .#{$prefix}-m#{$infix}-auto {
        margin: auto !important;
      }
      .#{$prefix}-mt#{$infix}-auto,
      .#{$prefix}-my#{$infix}-auto {
        margin-top: auto !important;
      }
      .#{$prefix}-mr#{$infix}-auto,
      .#{$prefix}-mx#{$infix}-auto {
        margin-right: auto !important;
      }
      .#{$prefix}-mb#{$infix}-auto,
      .#{$prefix}-my#{$infix}-auto {
        margin-bottom: auto !important;
      }
      .#{$prefix}-ml#{$infix}-auto,
      .#{$prefix}-mx#{$infix}-auto {
        margin-left: auto !important;
      }
    }
  }
}

// Grid
// -----------------------------------------------------------------------------------------------------------
@mixin generate-grid($span) {
  .#{$prefix}-grid {
    display: grid !important;
    @each $size, $length in $spacing {
      &.#{$prefix}-grid-gap-#{$size} {
        grid-gap: #{$length} !important;
      }
    }
    @include prop-set("align-items", $align-positions, "align", "grid");
    @include prop-set("justify-content", $positions, "justify", "grid");
    @include position-setter("grid");
    @each $item in $span {
      &.#{$prefix}-grid-col-#{$item} {
        grid-template-columns: repeat($item, minmax(0, 1fr));
      }
      &.#{$prefix}-grid-row-#{$item} {
        grid-template-rows: repeat($item, minmax(0, 1fr));
      }
      .#{$prefix}-grid-col-span-#{$item} {
        grid-column: span $item / span $item;
      }
      .#{$prefix}-grid-row-span-#{$item} {
        grid-row: span $item / span $item;
      }
      .#{$prefix}-grid-order-#{$item} {
        order: $item;
      }
    }
  }
}

// General
// -----------------------------------------------------------------------------------------------------------

@mixin defineCSS($prop, $arr, $name: false) {
  @each $item in $arr {
    .#{$name}-#{$item + ""} {
      #{$prop}: #{$item} !important;
    }
  }
}

@mixin defineCSSObject($prop, $arr, $name) {
  @each $item, $value in $arr {
    .#{$name}-#{$item + ""} {
      #{$prop}: #{$value} !important;
    }
  }
}

@mixin prop-set($prop, $arr, $name: false, $type: "flex") {
  @each $mod, $dir in $arr {
    $class: "";
    @if $name {
      $class: $name + "-";
    }
    &-#{$class}#{$mod} {
      display: #{$type} !important;
      #{$prop}: #{$dir};
    }
  }
}

@mixin position-setter($type: "flex") {
  @each $position, $position-value in $positions {
    @each $align, $value in $align-positions {
      $name: $position + "-" + $align;
      @if $position == $align {
        $name: #{$position};
      }
      &-#{$name} {
        display: #{$type} !important;
        justify-content: #{$position-value};
        align-items: #{$value};
      }
    }
  }
}
